role SYSTEM{
        User{
           fullAccess
        }
        Location{
            fullAccess
        }
        Zone{
            fullAccess
        }
        Trip{
            fullAccess
        }
        Report{
            fullAccess
        }
}
role USER_NORMAL {
       User{
           read(role) constrainedBy[self = caller] 
           read(surname)
           read(password) constrainedBy[self = caller]
           read(userzone) constrainedBy[self = caller] 
           read(name)
           read(trips) constrainedBy[self = caller] 
           add(trips) constrainedBy[self = caller]
           read(isBanned) constrainedBy[self = caller]
           add(users_reported) constrainedBy [(self = caller) and (target.reported.trips->exists(m | m.passenger->includes(self)))]
           read(users_reported) constrainedBy[self = caller]
        }
        Location{
            read
        }
        Zone{
            read
        }
        Trip{
            read constrainedBy [self.trip_path->exists(m | m.location_zone->includes(caller.userzone))]
            add(passenger) constrainedBy [target = caller and self.trip_path->forAll(v | v.location_zone->includes(caller.userzone))]
        }
        Report{
            create
            update(reporter) constrainedBy [value = caller]
            update(reported) constrainedBy [caller = self.reporter and caller.trips->exists(u | u.passenger->includes(value))]
            update(text) constrainedBy [caller = self.reporter]
            update(trip) constrainedBy [caller = self.reporter]
            read constrainedBy [self.reporter = caller]
        }
}
role USER_PREMIUM {
        User{
           create
           read(role) constrainedBy[self = caller]
           read(name)
           read(surname)
           read(password) constrainedBy[self = caller]
           read(userzone) constrainedBy[self = caller]
           read(trips) constrainedBy[self = caller]
           add(trips) constrainedBy[self = caller]
           read(isBanned) constrainedBy[self = caller]
           add(users_reported) constrainedBy [(self = caller) and (target.reported.trips->exists(m | m.passenger->includes(self)))]
           read(users_reported) constrainedBy [self = caller]
        }
        Location{
            read
        }
        Zone{
            read
        }
        Trip{
            //can READ iff the trip passes in a location that belongs
            //EITHER to the user's zone
            //OR to a zone overlapping with the user's zone
            read constrainedBy [self.trip_path->exists(m | m.location_zone->includes(caller.userzone))
            or 
            self.trip_path->forAll(z | z.location_zone->exists(y | y.zone_locations->exists(x | x.location_zone->exists(f | f = caller.userzone))))]

            create
            update(driver) constrainedBy [value = caller] //only if i created it
            update(date) constrainedBy[self.driver = caller]    //only if im driver
            update(price) constrainedBy[self.driver = caller] //only if im driver

            
            //can JOIN a trip (add himself), iff at least one ot the locations in the trip belongs to the user's zone
            add(passenger) constrainedBy[target = caller and self.trip_path->exists(v | v.location_zone->includes(caller.userzone))]

            //can CREATE new trip iff all locations with the trip are:
            //EITHER belong to the user's zone
            //OR blong to zones that the user visited before in other trips
            
            add(trip_path) constrainedBy [caller.userzone.zone_locations.asSet()->includes(target)
            or
            caller.trips->exists(z | z.trip_path->includes(target))]
        }
        Report{
            create
            update(reporter) constrainedBy [value = caller]
            update(reported) constrainedBy [caller = self.reporter and caller.trips->exists(u | u.passenger->includes(value))]
            update(text) constrainedBy [caller = self.reporter]
            update(trip) constrainedBy [caller = self.reporter]
            read constrainedBy [self.reporter = caller]
        }
}
role ADMIN{
        User{
           update(role) constrainedBy[self.trips->select(t | Report.allInstances()->select(v1| v1.trip = t and v1.reported = self)->isEmpty())->size() >= 4]
           update(isBanned) constrainedBy [((self.role = Role::USER_NORMAL) implies (Report.allInstances()->select(v | v.reported = self)->size() >= 2))  or  ((self.role = Role::USER_PREMIUM) implies (Report.allInstances()->select(v | v.reported = self)->size() >= 5))]
           read
           //((self.role = Role::USER_NORMAL) implies (Report.allInstances()->select(v | v.reported = self)->size >= 2))  or ((self.role = Role::USER_PREMIUM) implies (Report.allInstances()->select(v | v.reported = self)->size >= 5))
        }
        Location{
            create
            read
            update(location_name)
            update(x)
            update(y)
            add(location_zone)
            remove(location_zone)
            //cannot remove a whole location (not specified)
        }
        Zone{
            create
            read
            update(zone_name)
            add(zone_locations) //assign locations to zones, the inverse is also true
            remove(zone_locations)
        }
        Trip{
            read
        }
        Report{
            read
        }
}

role USER_BANNED{
}
